{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude80 Bienvenidos al Curso Avanzado de Backend en Python con FastAPI","text":"<p>\u00a1Bienvenidos a este apasionante viaje por el desarrollo de APIs modernas y escalables! Este Curso Avanzado de Backend en Python con FastAPI est\u00e1 dise\u00f1ado para llevar tus habilidades de programaci\u00f3n al siguiente nivel, enfoc\u00e1ndote en la creaci\u00f3n de aplicaciones backend robustas, seguras y de alto rendimiento utilizando FastAPI. Ya sea que tengas experiencia previa en Python o est\u00e9s buscando especializarte en el desarrollo de APIs, este programa te proporcionar\u00e1 las herramientas pr\u00e1cticas y te\u00f3ricas necesarias para destacar en entornos profesionales.</p>"},{"location":"#que-aprenderas-en-este-curso","title":"\u00bfQu\u00e9 aprender\u00e1s en este curso?","text":"<p>A lo largo de 16 clases (4 meses, 1 clase semanal de 2-3 horas), explorar\u00e1s los fundamentos y t\u00e9cnicas avanzadas del desarrollo backend, organizados en cuatro m\u00f3dulos te\u00f3rico-pr\u00e1cticos:</p>"},{"location":"#modulo-1-fundamentos-de-fastapi","title":"M\u00f3dulo 1: Fundamentos de FastAPI","text":"<ul> <li>Introducci\u00f3n a FastAPI: Comprender\u00e1s qu\u00e9 es FastAPI, sus ventajas frente a otros frameworks y c\u00f3mo crear APIs REST b\u00e1sicas.</li> <li>Rutas y validaci\u00f3n: Aprender\u00e1s a dise\u00f1ar rutas din\u00e1micas, manejar par\u00e1metros y validar datos con Pydantic.</li> <li>Documentaci\u00f3n autom\u00e1tica: Dominar\u00e1s el uso de herramientas como Swagger y ReDoc para documentar APIs de forma eficiente.</li> </ul>"},{"location":"#modulo-2-persistencia-y-bases-de-datos","title":"M\u00f3dulo 2: Persistencia y bases de datos","text":"<ul> <li>Integraci\u00f3n con bases de datos: Conectar\u00e1s FastAPI con bases de datos relacionales (PostgreSQL/MySQL) usando SQLAlchemy y explorar\u00e1s opciones NoSQL como MongoDB.</li> <li>Operaciones CRUD: Implementar\u00e1s operaciones completas de creaci\u00f3n, lectura, actualizaci\u00f3n y eliminaci\u00f3n de datos.</li> <li>Migraciones: Gestionar\u00e1s cambios en la estructura de bases de datos con Alembic.</li> </ul>"},{"location":"#modulo-3-autenticacion-y-seguridad","title":"M\u00f3dulo 3: Autenticaci\u00f3n y seguridad","text":"<ul> <li>Autenticaci\u00f3n con JWT: Configurar\u00e1s sistemas de autenticaci\u00f3n basados en tokens para proteger tus APIs.</li> <li>Autorizaci\u00f3n y seguridad: Implementar\u00e1s roles, permisos y medidas de seguridad como CORS y protecci\u00f3n contra ataques comunes.</li> <li>Testing: Escribir\u00e1s pruebas unitarias para garantizar la calidad de tus APIs con Pytest.</li> </ul>"},{"location":"#modulo-4-despliegue-y-escalabilidad","title":"M\u00f3dulo 4: Despliegue y escalabilidad","text":"<ul> <li>Optimizaci\u00f3n: Mejorar\u00e1s el rendimiento de tus APIs con t\u00e9cnicas como cacheo (Redis) y tareas as\u00edncronas.</li> <li>Despliegue: Aprender\u00e1s a desplegar tus APIs en la nube usando Docker y plataformas como Heroku, AWS o Render.</li> <li>Monitoreo: Configurar\u00e1s logging y herramientas como Prometheus para supervisar aplicaciones en producci\u00f3n.</li> </ul>"},{"location":"#metodologia-del-curso","title":"Metodolog\u00eda del curso","text":"<p>El curso combina teor\u00eda y pr\u00e1ctica para garantizar un aprendizaje s\u00f3lido y aplicado:</p> <ul> <li>Clases te\u00f3rico-pr\u00e1cticas: Cada sesi\u00f3n incluye explicaciones claras de conceptos clave, seguidas de ejercicios pr\u00e1cticos para reforzar el aprendizaje.</li> <li>Proyectos incrementales: Desarrollar\u00e1s una API completa a lo largo del curso, aplicando los conocimientos de cada m\u00f3dulo en un proyecto final integrador (por ejemplo, una API para una tienda online).</li> <li>Ejercicios pr\u00e1cticos: Actividades guiadas para crear rutas, conectar bases de datos, implementar autenticaci\u00f3n y desplegar aplicaciones.</li> <li>Material complementario: Acceder\u00e1s a c\u00f3digo de ejemplo, lecturas recomendadas y repositorios en GitHub para apoyar tu aprendizaje.</li> </ul>"},{"location":"#compromiso-del-curso","title":"Compromiso del curso","text":"<p>Nuestro compromiso es impulsar tu desarrollo profesional como desarrollador backend. Este curso no solo te ense\u00f1ar\u00e1 a construir APIs modernas con FastAPI, sino que tambi\u00e9n te inspirar\u00e1 a dise\u00f1ar soluciones escalables, seguras y eficientes que respondan a las necesidades de proyectos reales. Al finalizar, tendr\u00e1s las competencias necesarias para:</p> <ul> <li>Dise\u00f1ar e implementar APIs RESTful robustas.</li> <li>Integrar bases de datos relacionales y NoSQL en aplicaciones backend.</li> <li>Aplicar buenas pr\u00e1cticas de seguridad, testing y despliegue.</li> <li>Contribuir a proyectos tecnol\u00f3gicos innovadores con confianza.</li> </ul>"},{"location":"#embarcate-en-esta-aventura-tecnologica","title":"\u00a1Emb\u00e1rcate en esta aventura tecnol\u00f3gica!","text":"<p>Estamos emocionados de acompa\u00f1arte en este proceso de aprendizaje. Con dedicaci\u00f3n y pr\u00e1ctica, pronto estar\u00e1s creando APIs de alto rendimiento, gestionando datos de forma eficiente y desplegando aplicaciones en entornos reales. \u00a1Prep\u00e1rate para dominar el desarrollo backend con FastAPI!</p> <p>\u00a1Bienvenido al mundo del desarrollo backend moderno!</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/posts/post1/","title":"Happy new years eve!","text":"<p>We hope you are all having fun and wish you all the best for the new year!</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>"},{"location":"content/curso/","title":"Curso de FastAPI: Estructura de 16 Clases","text":"<p>Este curso de FastAPI de 16 clases est\u00e1 dise\u00f1ado para ense\u00f1ar desde los fundamentos hasta temas avanzados, con un enfoque pr\u00e1ctico centrado en el desarrollo de una API de gesti\u00f3n de proyectos. Cada clase combina teor\u00eda, pr\u00e1ctica y trabajo en un proyecto continuo, asumiendo un nivel inicial-intermedio en Python. Duraci\u00f3n aproximada por clase: 1.5-2 horas.</p>"},{"location":"content/curso/#modulo-1-fundamentos-y-primeros-pasos","title":"M\u00f3dulo 1: Fundamentos y Primeros Pasos","text":""},{"location":"content/curso/#clase-1-introduccion-a-fastapi-y-apis-rest","title":"Clase 1: Introducci\u00f3n a FastAPI y APIs REST","text":"<ul> <li>Objetivo: Comprender FastAPI y configurar el entorno.</li> <li>Contenido:</li> <li>\u00bfQu\u00e9 es FastAPI? Ventajas y comparaci\u00f3n con otros frameworks.</li> <li>Conceptos de APIs REST: m\u00e9todos HTTP, endpoints, JSON.</li> <li>Instalaci\u00f3n de FastAPI, Uvicorn y Python.</li> <li>Pr\u00e1ctica: Crear una API con un endpoint <code>/projects</code> que devuelva una lista de proyectos.</li> <li>Tarea: Configurar el entorno local y probar la API.</li> </ul>"},{"location":"content/curso/#clase-2-rutas-y-parametros","title":"Clase 2: Rutas y Par\u00e1metros","text":"<ul> <li>Objetivo: Crear endpoints din\u00e1micos con par\u00e1metros.</li> <li>Contenido:</li> <li>Endpoints con GET, POST, PUT, DELETE.</li> <li>Par\u00e1metros de ruta (<code>/projects/{id}</code>) y query parameters (<code>/projects?status=active</code>).</li> <li>Validaci\u00f3n b\u00e1sica de datos.</li> <li>Pr\u00e1ctica: Implementar endpoints para crear y obtener proyectos.</li> <li>Tarea: Crear un endpoint para eliminar un proyecto.</li> </ul>"},{"location":"content/curso/#clase-3-modelos-con-pydantic","title":"Clase 3: Modelos con Pydantic","text":"<ul> <li>Objetivo: Usar Pydantic para validar datos.</li> <li>Contenido:</li> <li>Definici\u00f3n de modelos Pydantic.</li> <li>Validaci\u00f3n de entradas y salidas.</li> <li>Uso de <code>response_model</code>.</li> <li>Pr\u00e1ctica: Crear un modelo para validar datos de proyectos (nombre, descripci\u00f3n, fecha).</li> <li>Tarea: Implementar un endpoint que valide la creaci\u00f3n de un proyecto.</li> </ul>"},{"location":"content/curso/#clase-4-documentacion-y-estructura-del-proyecto","title":"Clase 4: Documentaci\u00f3n y Estructura del Proyecto","text":"<ul> <li>Objetivo: Documentar la API y organizar el proyecto.</li> <li>Contenido:</li> <li>Swagger UI y ReDoc para documentaci\u00f3n autom\u00e1tica.</li> <li>Estructura de carpetas y buenas pr\u00e1cticas.</li> <li>Introducci\u00f3n al proyecto: API de gesti\u00f3n de proyectos.</li> <li>Pr\u00e1ctica: Documentar endpoints con tags y descripciones.</li> <li>Tarea: Dise\u00f1ar una estructura de carpetas para el proyecto.</li> </ul>"},{"location":"content/curso/#modulo-2-funcionalidades-intermedias-y-bases-de-datos","title":"M\u00f3dulo 2: Funcionalidades Intermedias y Bases de Datos","text":""},{"location":"content/curso/#clase-5-bases-de-datos-con-sqlalchemy","title":"Clase 5: Bases de Datos con SQLAlchemy","text":"<ul> <li>Objetivo: Conectar la API a una base de datos.</li> <li>Contenido:</li> <li>Configuraci\u00f3n de SQLAlchemy (SQLite/PostgreSQL).</li> <li>Modelos de base de datos para proyectos.</li> <li>Operaciones CRUD b\u00e1sicas.</li> <li>Pr\u00e1ctica: Almacenar y recuperar proyectos en una base de datos.</li> <li>Tarea: Crear un endpoint para actualizar proyectos.</li> </ul>"},{"location":"content/curso/#clase-6-relaciones-en-bases-de-datos","title":"Clase 6: Relaciones en Bases de Datos","text":"<ul> <li>Objetivo: Manejar relaciones en la base de datos.</li> <li>Contenido:</li> <li>Relaciones uno-a-muchos (proyectos y tareas).</li> <li>Configuraci\u00f3n en SQLAlchemy.</li> <li>Consultas para datos relacionados.</li> <li>Pr\u00e1ctica: Asociar tareas a un proyecto.</li> <li>Tarea: Listar tareas de un proyecto.</li> </ul>"},{"location":"content/curso/#clase-7-autenticacion-con-oauth2","title":"Clase 7: Autenticaci\u00f3n con OAuth2","text":"<ul> <li>Objetivo: Implementar autenticaci\u00f3n con JWT.</li> <li>Contenido:</li> <li>Autenticaci\u00f3n con OAuth2 y JWT.</li> <li>Endpoints protegidos con <code>OAuth2PasswordBearer</code>.</li> <li>Generaci\u00f3n y verificaci\u00f3n de tokens.</li> <li>Pr\u00e1ctica: Proteger endpoints de proyectos.</li> <li>Tarea: Crear un endpoint de login.</li> </ul>"},{"location":"content/curso/#clase-8-manejo-de-errores","title":"Clase 8: Manejo de Errores","text":"<ul> <li>Objetivo: Gestionar errores de forma robusta.</li> <li>Contenido:</li> <li>Uso de <code>HTTPException</code>.</li> <li>Respuestas de error estructuradas.</li> <li>Middleware para errores globales.</li> <li>Pr\u00e1ctica: Agregar manejo de errores a endpoints.</li> <li>Tarea: Crear un middleware para registrar errores.</li> </ul>"},{"location":"content/curso/#modulo-3-optimizacion-y-funcionalidades-avanzadas","title":"M\u00f3dulo 3: Optimizaci\u00f3n y Funcionalidades Avanzadas","text":""},{"location":"content/curso/#clase-9-paginacion-y-filtrado","title":"Clase 9: Paginaci\u00f3n y Filtrado","text":"<ul> <li>Objetivo: Optimizar listas de datos.</li> <li>Contenido:</li> <li>Paginaci\u00f3n para proyectos o tareas.</li> <li>Filtrado y ordenamiento con query parameters.</li> <li>Optimizaci\u00f3n de consultas.</li> <li>Pr\u00e1ctica: Crear un endpoint paginado para proyectos.</li> <li>Tarea: Implementar filtros por estado o fecha.</li> </ul>"},{"location":"content/curso/#clase-10-programacion-asincrona","title":"Clase 10: Programaci\u00f3n As\u00edncrona","text":"<ul> <li>Objetivo: Usar asincron\u00eda para mejorar el rendimiento.</li> <li>Contenido:</li> <li><code>def</code> vs. <code>async def</code>.</li> <li>Bases de datos as\u00edncronas (<code>asyncpg</code>).</li> <li>Beneficios de la asincron\u00eda.</li> <li>Pr\u00e1ctica: Convertir un endpoint a as\u00edncrono.</li> <li>Tarea: Comparar rendimiento s\u00edncrono vs. as\u00edncrono.</li> </ul>"},{"location":"content/curso/#clase-11-dependencias-avanzadas","title":"Clase 11: Dependencias Avanzadas","text":"<ul> <li>Objetivo: Crear dependencias reutilizables.</li> <li>Contenido:</li> <li>Uso de <code>Depends</code> para autenticaci\u00f3n y validaciones.</li> <li>Dependencias anidadas.</li> <li>Ejemplos de dependencias complejas.</li> <li>Pr\u00e1ctica: Verificar roles de usuario con una dependencia.</li> <li>Tarea: Limitar acceso por rol.</li> </ul>"},{"location":"content/curso/#clase-12-testing-automatizado","title":"Clase 12: Testing Automatizado","text":"<ul> <li>Objetivo: Escribir pruebas para la API.</li> <li>Contenido:</li> <li><code>pytest</code> y <code>TestClient</code>.</li> <li>Pruebas unitarias e integraci\u00f3n.</li> <li>Pruebas con base de datos.</li> <li>Pr\u00e1ctica: Escribir pruebas para endpoints.</li> <li>Tarea: Validar errores de autenticaci\u00f3n.</li> </ul>"},{"location":"content/curso/#modulo-4-produccion-y-caracteristicas-avanzadas","title":"M\u00f3dulo 4: Producci\u00f3n y Caracter\u00edsticas Avanzadas","text":""},{"location":"content/curso/#clase-13-websockets","title":"Clase 13: WebSockets","text":"<ul> <li>Objetivo: Implementar comunicaci\u00f3n en tiempo real.</li> <li>Contenido:</li> <li>WebSockets en FastAPI.</li> <li>Notificaciones para proyectos (ej. tarea asignada).</li> <li>Manejo de conexiones.</li> <li>Pr\u00e1ctica: Crear un WebSocket para notificaciones.</li> <li>Tarea: Notificar nuevos proyectos.</li> </ul>"},{"location":"content/curso/#clase-14-integracion-con-servicios-externos","title":"Clase 14: Integraci\u00f3n con Servicios Externos","text":"<ul> <li>Objetivo: Conectar con APIs externas.</li> <li>Contenido:</li> <li>Uso de <code>httpx</code> para consumir APIs.</li> <li>Respuestas as\u00edncronas.</li> <li>Ejemplo: notificaciones por correo.</li> <li>Pr\u00e1ctica: Integrar un servicio externo.</li> <li>Tarea: Probar una API externa relevante.</li> </ul>"},{"location":"content/curso/#clase-15-despliegue-en-produccion","title":"Clase 15: Despliegue en Producci\u00f3n","text":"<ul> <li>Objetivo: Llevar la API a producci\u00f3n.</li> <li>Contenido:</li> <li>Uvicorn y Gunicorn.</li> <li>Despliegue en Heroku, AWS o DigitalOcean.</li> <li>Variables de entorno y seguridad.</li> <li>Pr\u00e1ctica: Desplegar la API.</li> <li>Tarea: Configurar HTTPS.</li> </ul>"},{"location":"content/curso/#clase-16-proyecto-final-y-cierre","title":"Clase 16: Proyecto Final y Cierre","text":"<ul> <li>Objetivo: Completar y presentar el proyecto.</li> <li>Contenido:</li> <li>Finalizaci\u00f3n de la API de gesti\u00f3n de proyectos.</li> <li>Revisi\u00f3n de c\u00f3digo y documentaci\u00f3n.</li> <li>Presentaci\u00f3n de proyectos.</li> <li>Pr\u00e1ctica: Desplegar y probar el proyecto final.</li> <li>Tarea: Compartir repositorio y un informe.</li> </ul>"},{"location":"content/curso/#notas-adicionales","title":"Notas Adicionales","text":"<ul> <li>Proyecto: Los estudiantes desarrollan una API de gesti\u00f3n de proyectos (proyectos, tareas, usuarios) a lo largo del curso.</li> <li>Metodolog\u00eda: 30% teor\u00eda, 50% pr\u00e1ctica, 20% resoluci\u00f3n de problemas.</li> <li>Requisitos previos: Python b\u00e1sico y conceptos de web.</li> <li>Recursos:</li> <li>Documentaci\u00f3n de FastAPI</li> <li>Tutoriales de SQLAlchemy, Pydantic, JWT.</li> <li>Repositorio de GitHub con ejemplos.</li> <li>Evaluaci\u00f3n: Proyecto (50%), tareas (30%), participaci\u00f3n (20%).</li> </ul>"},{"location":"content/p1/","title":"Clase 1: Introducci\u00f3n a FastAPI y APIs REST","text":"<p>Objetivo de la clase: Comprender los fundamentos de FastAPI y las APIs REST, configurar el entorno de desarrollo y crear una API b\u00e1sica con rutas y respuestas JSON.</p>"},{"location":"content/p1/#1-que-es-fastapi-ventajas-frente-a-otros-frameworks","title":"1. \u00bfQu\u00e9 es FastAPI? Ventajas frente a otros frameworks","text":"<p>Teor\u00eda - Definici\u00f3n de FastAPI:   FastAPI es un framework moderno y de alto rendimiento para construir APIs con Python, basado en est\u00e1ndares como OpenAPI y JSON Schema. Utiliza programaci\u00f3n as\u00edncrona (async/await) y tipado est\u00e1tico con Pydantic para validaci\u00f3n de datos.</p> <ul> <li>Ventajas principales:  </li> <li>Rendimiento: Comparable a frameworks como Node.js o Go, gracias a Starlette y Uvicorn (ASGI).  </li> <li>Documentaci\u00f3n autom\u00e1tica: Genera documentaci\u00f3n interactiva con Swagger y ReDoc.  </li> <li>Validaci\u00f3n autom\u00e1tica: Usa Pydantic para validar datos de entrada y salida.  </li> <li>Soporte as\u00edncrono: Ideal para aplicaciones con alta concurrencia.  </li> <li>Facilidad de uso: Sintaxis simple y moderna, compatible con Python 3.8+.  </li> <li>Comparaci\u00f3n con otros frameworks:  <ul> <li>Flask: M\u00e1s simple, pero menos performante y sin soporte nativo para async ni documentaci\u00f3n autom\u00e1tica.  </li> <li>Django REST Framework: M\u00e1s robusto para proyectos grandes, pero m\u00e1s pesado y menos enfocado en APIs r\u00e1pidas.  </li> </ul> </li> </ul>"},{"location":"content/p1/#2-conceptos-clave-de-apis-rest","title":"2. Conceptos clave de APIs REST","text":"<p>Teor\u00eda - \u00bfQu\u00e9 es una API REST?:  </p> <p>Una API REST (Representational State Transfer) es un estilo arquitect\u00f3nico para dise\u00f1ar aplicaciones web, basado en recursos identificados por URLs, operaciones mediante m\u00e9todos HTTP y respuestas en formatos como JSON.  </p> <ul> <li> <p>M\u00e9todos HTTP principales:  </p> </li> <li> <p>GET: Obtener datos (ej. lista de usuarios).  </p> </li> <li>POST: Crear un nuevo recurso (ej. registrar un usuario).  </li> <li>PUT/PATCH: Actualizar un recurso existente.  </li> <li>DELETE: Eliminar un recurso.  </li> <li> <p>C\u00f3digos de estado HTTP:  </p> </li> <li> <p>2xx: \u00c9xito (200 OK, 201 Created).  </p> </li> <li>4xx: Errores del cliente (400 Bad Request, 404 Not Found).  </li> <li>5xx: Errores del servidor (500 Internal Server Error).  </li> <li> <p>Buenas pr\u00e1cticas REST:  </p> </li> <li> <p>URLs descriptivas (ej. <code>/users/{id}</code> en lugar de <code>/get_user</code>).  </p> </li> <li>Uso consistente de m\u00e9todos HTTP y c\u00f3digos de estado.  </li> <li>Respuestas en JSON estandarizadas.</li> </ul>"},{"location":"content/p1/#3-instalacion-y-configuracion-del-entorno-fastapi-uvicorn-30-minutos","title":"3. Instalaci\u00f3n y configuraci\u00f3n del entorno (FastAPI, Uvicorn) (30 minutos)","text":"<p>Teor\u00eda - Requisitos: </p> <ul> <li>Python 3.8 o superior.  </li> <li>Entorno virtual (venv o poetry).  </li> <li> <p>Instalaci\u00f3n de dependencias: <code>fastapi</code>, <code>uvicorn</code>.  </p> </li> <li> <p>Pasos para configurar el entorno: </p> </li> <li> <p>Crear un entorno virtual: <code>python -m venv env</code>.  </p> </li> <li>Activar el entorno: <code>source env/bin/activate</code> (Linux/Mac) o <code>env\\Scripts\\activate</code> (Windows).  </li> <li> <p>Instalar FastAPI y Uvicorn: <code>pip install fastapi uvicorn</code>.  </p> </li> <li> <p>Uvicorn: Servidor ASGI que permite ejecutar aplicaciones FastAPI de forma eficiente.</p> </li> </ul> <p>Pr\u00e1ctica - Ejercicio guiado: </p> <ol> <li>Configurar un entorno virtual en la m\u00e1quina de cada estudiante.  </li> <li>Instalar FastAPI y Uvicorn.  </li> <li>Crear un archivo <code>requirements.txt</code> con las dependencias.  </li> <li>Verificaci\u00f3n: Ejecutar <code>uvicorn --version</code> para confirmar la instalaci\u00f3n.</li> </ol>"},{"location":"content/p1/#4-creacion-de-la-primera-api-rutas-basicas-y-respuestas-json-60-minutos","title":"4. Creaci\u00f3n de la primera API: rutas b\u00e1sicas y respuestas JSON (60 minutos)","text":"<p>Teor\u00eda - Estructura b\u00e1sica de una aplicaci\u00f3n FastAPI:  </p> <ul> <li>Importar <code>FastAPI</code> y crear una instancia.  </li> <li>Definir rutas con decoradores (<code>@app.get</code>, <code>@app.post</code>, etc.).  </li> <li>Devolver respuestas en formato JSON.  </li> <li>Ejemplo simple:</li> </ul> <p><pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"\u00a1Hola, FastAPI!\"}\n</code></pre> - Ejecutar la API:   - Comando: <code>uvicorn main:app --reload</code>.   - Acceso a la API en <code>http://localhost:8000</code>.   - Documentaci\u00f3n autom\u00e1tica en <code>http://localhost:8000/docs</code>.</p> <p>Pr\u00e1ctica - Ejercicio guiado:  </p> <ol> <li>Crear un archivo <code>main.py</code> con la siguiente API:  <ul> <li>Ruta <code>GET /</code>: Devuelve un mensaje de bienvenida.  </li> <li>Ruta <code>GET /items/{item_id}</code>: Devuelve un JSON con el ID del item y un nombre (pasado como query parameter).  </li> <li>Ruta <code>POST /items</code>: Recibe un JSON con un campo <code>name</code> y devuelve un mensaje confirmando la creaci\u00f3n.  </li> </ul> </li> <li>Ejecutar la API con Uvicorn y probar los endpoints con un navegador o Postman.  </li> <li> <p>Ejercicio individual: </p> </li> <li> <p>Extender la API para incluir una ruta <code>GET /users/{user_id}</code> que devuelva un JSON con el ID del usuario y un nombre ficticio.  </p> </li> <li>Probar la documentaci\u00f3n autom\u00e1tica en <code>/docs</code>.</li> </ol>"},{"location":"content/p1/#material-complementario","title":"Material complementario","text":"<ul> <li>C\u00f3digo de ejemplo: Repositorio con el c\u00f3digo de la clase (subido a GitHub o compartido en la plataforma del curso).  </li> <li>Lecturas recomendadas:  </li> <li>Documentaci\u00f3n de FastAPI: https://fastapi.tiangolo.com/.  </li> <li>Gu\u00eda de REST: https://restfulapi.net/.  </li> <li>Herramientas: Postman o cURL para probar endpoints.</li> </ul>"},{"location":"content/p1/#actividad-de-consulta","title":"Actividad de consulta","text":"<p>Preguntas generales dise\u00f1adas para evaluar y reforzar los conocimientos adquiridos en la Clase 1: Introducci\u00f3n a FastAPI y APIs REST. Las preguntas cubren los temas tratados: introducci\u00f3n a FastAPI, conceptos de APIs REST, instalaci\u00f3n del entorno y creaci\u00f3n de una API b\u00e1sica.</p>"},{"location":"content/p1/#preguntas-generales","title":"Preguntas generales","text":"<ol> <li> <p>\u00bfQu\u00e9 es FastAPI y cu\u00e1les son sus principales caracter\u00edsticas que lo diferencian de otros frameworks como Flask o Django REST Framework? (Eval\u00faa la comprensi\u00f3n de la definici\u00f3n y ventajas de FastAPI.)</p> </li> <li> <p>Explica qu\u00e9 es una API REST y describe las caracter\u00edsticas principales que debe cumplir para considerarse RESTful. (Eval\u00faa el entendimiento del concepto de APIs REST.)</p> </li> <li> <p>\u00bfCu\u00e1les son los m\u00e9todos HTTP m\u00e1s comunes utilizados en una API REST y qu\u00e9 prop\u00f3sito tiene cada uno? (Eval\u00faa el conocimiento de los m\u00e9todos HTTP.)</p> </li> <li> <p>\u00bfQu\u00e9 significan los c\u00f3digos de estado HTTP 200, 404 y 500? Proporciona un ejemplo de uso para cada uno en el contexto de una API. (Eval\u00faa la comprensi\u00f3n de los c\u00f3digos de estado HTTP.)</p> </li> <li> <p>\u00bfPor qu\u00e9 es importante usar un entorno virtual al desarrollar una aplicaci\u00f3n con FastAPI? \u00bfC\u00f3mo se crea uno en Python? (Eval\u00faa el conocimiento sobre la configuraci\u00f3n del entorno.)</p> </li> <li> <p>\u00bfQu\u00e9 funci\u00f3n cumple Uvicorn en una aplicaci\u00f3n FastAPI y c\u00f3mo se ejecuta una API usando este servidor? (Eval\u00faa la comprensi\u00f3n de Uvicorn y su rol en FastAPI.)</p> </li> <li> <p>\u00bfC\u00f3mo se define una ruta b\u00e1sica en FastAPI? Escribe un ejemplo de c\u00f3digo para una ruta GET que devuelva un mensaje en formato JSON. (Eval\u00faa la capacidad de crear rutas b\u00e1sicas y devolver respuestas JSON.)</p> </li> <li> <p>\u00bfQu\u00e9 ventajas ofrece la documentaci\u00f3n autom\u00e1tica de FastAPI y c\u00f3mo se puede acceder a ella una vez que la API est\u00e1 en ejecuci\u00f3n? (Eval\u00faa el conocimiento sobre la documentaci\u00f3n autom\u00e1tica con Swagger/ReDoc.)</p> </li> <li> <p>\u00bfQu\u00e9 es Pydantic y c\u00f3mo se relaciona con FastAPI en el contexto de la creaci\u00f3n de APIs? (Eval\u00faa la comprensi\u00f3n inicial de Pydantic, aunque se profundice en clases posteriores.)</p> </li> <li> <p>Imagina que necesitas crear una ruta en FastAPI que reciba un par\u00e1metro din\u00e1mico en la URL (por ejemplo, un ID de usuario). Escribe el c\u00f3digo necesario y explica c\u00f3mo se procesa ese par\u00e1metro. (Eval\u00faa la aplicaci\u00f3n pr\u00e1ctica de rutas din\u00e1micas con par\u00e1metros.)</p> </li> </ol>"},{"location":"content/p2/","title":"Clase 2: Entornos Virtuales en Python e Introducci\u00f3n a FastAPI y APIs REST \ud83d\udc0d","text":"<p>\u00a1Bienvenidos a este tutorial definitivo sobre entornos virtuales en Python! \ud83c\udf89 Los entornos virtuales son una herramienta esencial para cualquier desarrollador de Python, ya que permiten aislar dependencias, gestionar proyectos y evitar conflictos entre paquetes. En este tutorial, aprender\u00e1s desde los conceptos b\u00e1sicos hasta t\u00e9cnicas avanzadas, con ejemplos pr\u00e1cticos, diagramas visuales y consejos \u00fatiles, todo presentado en un formato claro y atractivo. \u00a1Empecemos! \ud83d\ude80</p>"},{"location":"content/p2/#objetivo-del-tutorial","title":"Objetivo del Tutorial \ud83c\udfaf","text":"<p>\u2705 Dominar los entornos virtuales en Python Al finalizar, podr\u00e1s:</p> <ul> <li>Comprender qu\u00e9 son los entornos virtuales y por qu\u00e9 son importantes.</li> <li>Crear, activar, usar y eliminar entornos virtuales con <code>venv</code> y otras herramientas.</li> <li>Gestionar dependencias y exportar requisitos.</li> <li>Resolver problemas comunes y aplicar mejores pr\u00e1cticas.</li> </ul>"},{"location":"content/p2/#contenido-del-tutorial","title":"Contenido del Tutorial \ud83d\udcda","text":""},{"location":"content/p2/#1-que-es-un-entorno-virtual","title":"1. \u00bfQu\u00e9 es un Entorno Virtual? \ud83c\udf10","text":"<p>Un entorno virtual en Python es un espacio aislado que contiene una copia del int\u00e9rprete de Python y sus bibliotecas, permitiendo instalar paquetes espec\u00edficos para un proyecto sin afectar otros proyectos o el sistema global. Imagina que cada entorno virtual es una \"caja\" independiente con su propio conjunto de herramientas.</p>"},{"location":"content/p2/#por-que-usar-entornos-virtuales","title":"\u00bfPor qu\u00e9 usar entornos virtuales? \ud83e\udd14","text":"<ul> <li>Aislamiento: Evita conflictos entre versiones de paquetes (ej. <code>numpy 1.18</code> vs. <code>numpy 1.24</code>).</li> <li>Organizaci\u00f3n: Mantiene las dependencias de cada proyecto separadas.</li> <li>Portabilidad: Facilita compartir proyectos con archivos de requisitos.</li> <li>Seguridad: Protege el sistema global de instalaciones no deseadas.</li> </ul>"},{"location":"content/p2/#flujo-de-trabajo-con-entornos-virtuales","title":"Flujo de trabajo con entornos virtuales","text":"<p>Este diagrama muestra c\u00f3mo funcionan los entornos virtuales:</p> <pre><code>graph TD\n    A[Sistema Global &lt;br&gt; Python 3.10] --&gt;|Sin entorno virtual| B[Proyecto A &lt;br&gt; numpy 1.18, pandas 1.3]\n    A --&gt;|Sin entorno virtual| C[Proyecto B &lt;br&gt; numpy 1.24, pandas 2.0]\n    B --&gt; D{Conflicto de versiones}\n    C --&gt; D\n    E[Entorno Virtual A &lt;br&gt; Python 3.10, numpy 1.18, pandas 1.3] --&gt;|Aislamiento| F[Proyecto A]\n    G[Entorno Virtual B &lt;br&gt; Python 3.10, numpy 1.24, pandas 2.0] --&gt;|Aislamiento| H[Proyecto B]</code></pre> <p>Dato curioso</p> <p>Los entornos virtuales fueron introducidos en Python 3.3 con el m\u00f3dulo <code>venv</code>, aunque herramientas como <code>virtualenv</code> exist\u00edan antes.</p>"},{"location":"content/p2/#2-herramientas-para-entornos-virtuales","title":"2. Herramientas para Entornos Virtuales \ud83d\udee0\ufe0f","text":"<p>Python ofrece varias herramientas para crear entornos virtuales. Aqu\u00ed exploramos las m\u00e1s comunes:</p>"},{"location":"content/p2/#a-venv-recomendado","title":"a) <code>venv</code> (Recomendado)","text":"<ul> <li>Incluido en Python 3.3+.</li> <li>Ligero, est\u00e1ndar y sin dependencias externas.</li> <li>Ideal para la mayor\u00eda de los proyectos.</li> </ul>"},{"location":"content/p2/#b-virtualenv","title":"b) <code>virtualenv</code>","text":"<ul> <li>Herramienta de terceros m\u00e1s antigua.</li> <li>Compatible con Python 2 y versiones antiguas de Python 3.</li> <li>Ofrece caracter\u00edsticas adicionales (ej. soporte para m\u00faltiples int\u00e9rpretes).</li> </ul>"},{"location":"content/p2/#c-otros-breve-mencion","title":"c) Otros (Breve menci\u00f3n)","text":"<ul> <li><code>Conda</code>: Popular en ciencia de datos, gestiona entornos y paquetes no-Python.</li> <li><code>Poetry</code>/<code>Pipenv</code>: Combinan gesti\u00f3n de entornos y dependencias.</li> </ul> <p>Consejo</p> <p>Usa <code>venv</code> para simplicidad y compatibilidad, a menos que necesites funciones espec\u00edficas de otras herramientas.</p>"},{"location":"content/p2/#3-configuracion-inicial-instalacion-de-python","title":"3. Configuraci\u00f3n Inicial: Instalaci\u00f3n de Python \ud83d\udce6","text":"<p>Antes de crear entornos virtuales, aseg\u00farate de tener Python instalado.</p>"},{"location":"content/p2/#pasos","title":"Pasos","text":"<ol> <li>Descarga Python:</li> <li>Visita python.org y descarga Python 3.7+.</li> <li> <p>En Windows, marca \"Agregar Python al PATH\" durante la instalaci\u00f3n.</p> </li> <li> <p>Verifica la instalaci\u00f3n:</p> </li> </ol> <pre><code>python --version\n</code></pre> <p>Salida esperada: <pre><code>Python 3.10.5\n</code></pre></p> <ol> <li>Instala <code>pip</code> (si no est\u00e1 incluido):</li> </ol> <pre><code>python -m ensurepip --upgrade\npython -m pip install --upgrade pip\n</code></pre>"},{"location":"content/p2/#diagrama-de-instalacion","title":"Diagrama de instalaci\u00f3n","text":"<pre><code>flowchart TD\n    A[Inicio] --&gt; B{\u00bfPython instalado?}\n    B -- No --&gt; C[Descargar Python &lt;br&gt; python.org]\n    B -- S\u00ed --&gt; D{\u00bfpip instalado?}\n    C --&gt; E[Instalar Python &lt;br&gt; Agregar al PATH]\n    E --&gt; D\n    D -- No --&gt; F[Instalar pip &lt;br&gt; ensurepip]\n    D -- S\u00ed --&gt; G[Listo para crear &lt;br&gt; entornos virtuales]\n    F --&gt; G</code></pre>"},{"location":"content/p2/#4-crear-y-gestionar-entornos-virtuales-con-venv","title":"4. Crear y Gestionar Entornos Virtuales con <code>venv</code> \u2699\ufe0f","text":"<p>El m\u00f3dulo <code>venv</code> es la forma est\u00e1ndar de crear entornos virtuales en Python. A continuaci\u00f3n, te guiamos paso a paso.</p>"},{"location":"content/p2/#paso-1-crear-un-entorno-virtual","title":"Paso 1: Crear un entorno virtual","text":"<ol> <li>Navega al directorio de tu proyecto:</li> </ol> <pre><code>cd mi_proyecto\n</code></pre> <ol> <li>Crea un entorno virtual (llamado <code>venv</code> por convenci\u00f3n):</li> </ol> <pre><code>python -m venv .venv\n</code></pre> <p>Esto crea una carpeta <code>.venv/</code> con: - Un int\u00e9rprete de Python aislado. - Una copia de <code>pip</code>. - Directorios para paquetes (<code>site-packages</code>).</p>"},{"location":"content/p2/#paso-2-activar-el-entorno-virtual","title":"Paso 2: Activar el entorno virtual","text":"<p>Activa el entorno para que los comandos <code>python</code> y <code>pip</code> usen la versi\u00f3n aislada:</p> <ul> <li>Windows:</li> </ul> <pre><code>.venv\\Scripts\\activate\n</code></pre> <ul> <li>Linux/macOS:</li> </ul> <pre><code>source .venv/bin/activate\n</code></pre> <p>Salida esperada (prompt cambia): <pre><code>(venv) user@machine:~/mi_proyecto$\n</code></pre></p>"},{"location":"content/p2/#paso-3-instalar-paquetes","title":"Paso 3: Instalar paquetes","text":"<p>Con el entorno activado, instala paquetes con <code>pip</code>:</p> <pre><code>pip install requests\n</code></pre> <p>Verifica los paquetes instalados:</p> <pre><code>pip list\n</code></pre> <p>Salida ejemplo: <pre><code>Package    Version\n---------- -------\npip        22.3.1\nrequests   2.28.1\nsetuptools 65.5.0\n</code></pre></p>"},{"location":"content/p2/#paso-4-desactivar-el-entorno","title":"Paso 4: Desactivar el entorno","text":"<p>Para salir del entorno virtual:</p> <pre><code>deactivate\n</code></pre> <p>El prompt vuelve a la normalidad.</p>"},{"location":"content/p2/#diagrama-de-gestion-de-entornos-virtuales","title":"Diagrama de gesti\u00f3n de entornos virtuales","text":"<pre><code>sequenceDiagram\n    actor User\n    participant Sistema\n    User-&gt;&gt;Sistema: python -m venv .venv\n    Sistema--&gt;&gt;User: Entorno creado en .venv/\n    User-&gt;&gt;Sistema: source .venv/bin/activate\n    Sistema--&gt;&gt;User: Entorno activado\n    User-&gt;&gt;Sistema: pip install requests\n    Sistema--&gt;&gt;User: Paquete instalado en .venv/\n    User-&gt;&gt;Sistema: deactivate\n    Sistema--&gt;&gt;User: Entorno desactivado</code></pre> <p>\u00a1Logro desbloqueado!</p> <p>Has creado y activado tu primer entorno virtual. \u00a1Est\u00e1s listo para desarrollar proyectos aislados!</p>"},{"location":"content/p2/#5-gestion-de-dependencias","title":"5. Gesti\u00f3n de Dependencias \ud83d\udccb","text":"<p>Para compartir tu proyecto, necesitas documentar las dependencias. Aqu\u00ed te mostramos c\u00f3mo hacerlo.</p>"},{"location":"content/p2/#exportar-dependencias","title":"Exportar dependencias","text":"<p>Crea un archivo <code>requirements.txt</code> con las dependencias instaladas:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <p>Contenido ejemplo: <pre><code>requests==2.28.1\nurllib3==1.26.12\n</code></pre></p>"},{"location":"content/p2/#instalar-dependencias-desde-requirementstxt","title":"Instalar dependencias desde <code>requirements.txt</code>","text":"<p>En otro sistema o entorno, instala las dependencias:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>Buena pr\u00e1ctica</p> <p>Incluye <code>requirements.txt</code> en tu repositorio Git para facilitar la colaboraci\u00f3n.</p>"},{"location":"content/p2/#6-uso-de-entornos-virtuales-en-proyectos-reales","title":"6. Uso de Entornos Virtuales en Proyectos Reales \ud83d\udda5\ufe0f","text":"<p>Veamos un ejemplo pr\u00e1ctico con un proyecto que usa FastAPI.</p>"},{"location":"content/p2/#estructura-del-proyecto","title":"Estructura del proyecto","text":"<pre><code>mi_proyecto/\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 .venv/\n</code></pre>"},{"location":"content/p2/#codigo-de-ejemplo-mainpy","title":"C\u00f3digo de ejemplo (<code>main.py</code>)","text":"<pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"\u00a1Hola, mundo!\"}\n</code></pre>"},{"location":"content/p2/#pasos_1","title":"Pasos","text":"<ol> <li>Crea el entorno virtual:</li> </ol> <pre><code>python -m venv .venv\n</code></pre> <ol> <li>Activa el entorno:</li> </ol> <pre><code>source .venv/bin/activate  # Linux/macOS\n.venv\\Scripts\\activate     # Windows\n</code></pre> <ol> <li>Instala FastAPI y Uvicorn:</li> </ol> <pre><code>pip install fastapi uvicorn\n</code></pre> <ol> <li>Exporta las dependencias:</li> </ol> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <ol> <li>Ejecuta la aplicaci\u00f3n:</li> </ol> <pre><code>uvicorn main:app --reload\n</code></pre> <p>Visita <code>http://127.0.0.1:8000</code> para ver la respuesta.</p> <p>Pr\u00e1ctica recomendada</p> <p>Crea un entorno virtual por proyecto para mantener las dependencias organizadas.</p>"},{"location":"content/p2/#introduccion-a-fastapi-y-apis-rest","title":"Introducci\u00f3n a FastAPI y APIs REST \ud83c\udf1f","text":"<p>\u00a1Bienvenidos al curso de FastAPI! En esta primera clase, exploraremos los fundamentos de FastAPI, las APIs REST y c\u00f3mo configurar tu entorno de desarrollo para crear APIs modernas y r\u00e1pidas con Python. A trav\u00e9s de explicaciones, ejemplos pr\u00e1cticos y diagramas visuales, estar\u00e1s listo para construir tu primera API. \u00a1Empecemos! \ud83d\ude80</p>"},{"location":"content/p2/#objetivo-de-la-clase","title":"Objetivo de la Clase \ud83c\udfaf","text":"<p>\u2705 Comprender FastAPI y configurar el entorno de desarrollo Al finalizar esta clase, entender\u00e1s qu\u00e9 es FastAPI, sus ventajas, los conceptos clave de las APIs REST y tendr\u00e1s un entorno funcional para desarrollar aplicaciones.</p>"},{"location":"content/p2/#contenido-de-la-clase","title":"Contenido de la Clase \ud83d\udcda","text":""},{"location":"content/p2/#1-que-es-fastapi-ventajas-y-comparacion-con-otros-frameworks","title":"1. \u00bfQu\u00e9 es FastAPI? Ventajas y Comparaci\u00f3n con Otros Frameworks \ud83d\udee0\ufe0f","text":"<p>FastAPI es un framework web moderno para construir APIs con Python, dise\u00f1ado para ser r\u00e1pido, f\u00e1cil de usar y compatible con est\u00e1ndares como ASGI (Asynchronous Server Gateway Interface). Creado por Sebasti\u00e1n Ram\u00edrez, FastAPI combina rendimiento, tipado y documentaci\u00f3n autom\u00e1tica, lo que lo hace ideal para proyectos de cualquier escala.</p>"},{"location":"content/p2/#arquitectura-de-fastapi","title":"Arquitectura de FastAPI","text":"<p>El siguiente diagrama muestra c\u00f3mo FastAPI procesa solicitudes:</p> <pre><code>graph TD\n    A[\"Cliente\\n(Navegador, App)\"] --&gt;|Solicitud HTTP| B[\"Uvicorn\\n(Servidor ASGI)\"]\n    B --&gt; C[\"FastAPI\\n(Framework)\"]\n    C --&gt; D[\"Starlette\\n(Routing, Middlewares)\"]\n    C --&gt; E[\"Pydantic\\n(Validaci\u00f3n de datos)\"]\n    D --&gt; F[\"Endpoints\\n(L\u00f3gica de negocio)\"]\n    E --&gt; F\n    F --&gt;|Respuesta JSON| B\n    B --&gt;|Respuesta HTTP| A</code></pre>"},{"location":"content/p2/#por-que-elegir-fastapi","title":"\u00bfPor qu\u00e9 elegir FastAPI? \ud83c\udf08","text":"<ul> <li>Rendimiento: Comparable con Node.js y Go, gracias a Starlette y Uvicorn.</li> <li>Tipado y validaci\u00f3n: Usa Pydantic para validar datos autom\u00e1ticamente.</li> <li>Documentaci\u00f3n autom\u00e1tica: Genera interfaces con Swagger UI y ReDoc.</li> <li>Asincron\u00eda: Soporta <code>async/await</code> para aplicaciones de alto rendimiento.</li> <li>Simplicidad: Sintaxis clara y moderna.</li> </ul>"},{"location":"content/p2/#comparacion-con-otros-frameworks","title":"Comparaci\u00f3n con otros frameworks \ud83d\udcca","text":"Framework Velocidad Tipado Documentaci\u00f3n Autom\u00e1tica Asincron\u00eda Curva de Aprendizaje FastAPI \u2b50\u2b50\u2b50\u2b50\u2b50 S\u00ed S\u00ed (Swagger, ReDoc) S\u00ed Media Flask \u2b50\u2b50\u2b50 No No No Baja Django \u2b50\u2b50\u2b50 Parcial No Parcial Alta <p>Dato curioso</p> <p>FastAPI se inspira en Flask, pero a\u00f1ade soporte as\u00edncrono y validaci\u00f3n autom\u00e1tica, revolucionando el desarrollo de APIs en Python.</p>"},{"location":"content/p2/#2-conceptos-de-apis-rest-metodos-http-endpoints-y-json","title":"2. Conceptos de APIs REST: M\u00e9todos HTTP, Endpoints y JSON \ud83c\udf10","text":"<p>Una API REST (Representational State Transfer) es un estilo arquitect\u00f3nico para dise\u00f1ar aplicaciones web que permite la comunicaci\u00f3n entre sistemas mediante HTTP. Es la base de muchas aplicaciones modernas, conectando frontends (como React) con backends.</p>"},{"location":"content/p2/#componentes-clave-de-una-api-rest","title":"Componentes clave de una API REST \ud83d\udcdd","text":"<ul> <li>Endpoints: URLs que representan recursos (ej. <code>/users</code>, <code>/projects/1</code>).</li> <li>M\u00e9todos HTTP:</li> <li><code>GET</code>: Obtener datos.</li> <li><code>POST</code>: Crear recursos.</li> <li><code>PUT</code>/<code>PATCH</code>: Actualizar recursos.</li> <li><code>DELETE</code>: Eliminar recursos.</li> <li>JSON: Formato para enviar y recibir datos.</li> <li>C\u00f3digos de estado HTTP: Ej. <code>200 OK</code>, <code>404 Not Found</code>.</li> </ul>"},{"location":"content/p2/#flujo-de-una-solicitud-rest","title":"Flujo de una solicitud REST","text":"<p>Este diagrama ilustra el proceso de una solicitud REST:</p> <pre><code>sequenceDiagram\n    participant Cliente\n    participant Servidor\n    Cliente-&gt;&gt;Servidor: GET /projects\n    Servidor-&gt;&gt;Cliente: 200 OK &lt;br&gt; { \"projects\": [...] }\n    Cliente-&gt;&gt;Servidor: POST /projects &lt;br&gt; { \"name\": \"Proyecto A\" }\n    Servidor-&gt;&gt;Cliente: 201 Created &lt;br&gt; { \"id\": 1, \"name\": \"Proyecto A\" }</code></pre>"},{"location":"content/p2/#ejemplo-de-solicitud-rest","title":"Ejemplo de solicitud REST \ud83d\udda5\ufe0f","text":"<pre><code>GET /api/projects HTTP/1.1\nHost: example.com\nAccept: application/json\n</code></pre> <p>Respuesta:</p> <pre><code>{\n  \"projects\": [\n    {\"id\": 1, \"name\": \"Proyecto A\", \"status\": \"active\"},\n    {\"id\": 2, \"name\": \"Proyecto B\", \"status\": \"completed\"}\n  ]\n}\n</code></pre> <p>Consejo pr\u00e1ctico</p> <p>Aprende los c\u00f3digos de estado HTTP m\u00e1s comunes (200, 201, 400, 404, 500) para depurar tus APIs eficazmente.</p>"},{"location":"content/p2/#3-instalacion-de-fastapi-uvicorn-y-python","title":"3. Instalaci\u00f3n de FastAPI, Uvicorn y Python \u2699\ufe0f","text":"<p>Para desarrollar con FastAPI, necesitas un entorno configurado. A continuaci\u00f3n, te guiamos paso a paso.</p>"},{"location":"content/p2/#proceso-de-configuracion","title":"Proceso de configuraci\u00f3n","text":"<p>Este diagrama muestra los pasos para configurar el entorno:</p> <pre><code>flowchart TD\n    A[Inicio] --&gt; B{\u00bfPython instalado?}\n    B -- No --&gt; C[Instalar Python 3.7+]\n    B -- S\u00ed --&gt; D[Crear entorno virtual]\n    C --&gt; D\n    D --&gt; E[Activar entorno virtual]\n    E --&gt; F[Instalar FastAPI y Uvicorn]\n    F --&gt; G[Crear archivo main.py]\n    G --&gt; H[Ejecutar API con Uvicorn]\n    H --&gt; I[Probar API en navegador]</code></pre>"},{"location":"content/p2/#paso-1-instalar-python","title":"Paso 1: Instalar Python \ud83d\udce6","text":"<ol> <li>Descarga Python 3.7+ desde python.org.</li> <li>Verifica la instalaci\u00f3n:</li> </ol> <pre><code>python --version\n</code></pre>"},{"location":"content/p2/#paso-2-crear-un-entorno-virtual","title":"Paso 2: Crear un entorno virtual \ud83c\udf10","text":"<pre><code>python -m venv .venv\n</code></pre> <p>Activa el entorno:</p> <ul> <li>Windows: <code>.venv\\Scripts\\activate</code></li> <li>Linux/macOS: <code>source .venv/bin/activate</code></li> </ul>"},{"location":"content/p2/#paso-3-instalar-fastapi-y-uvicorn","title":"Paso 3: Instalar FastAPI y Uvicorn \ud83d\udcf2","text":"<pre><code>pip install fastapi uvicorn\n</code></pre>"},{"location":"content/p2/#paso-4-crear-tu-primera-api","title":"Paso 4: Crear tu primera API \ud83c\udf89","text":"<p>Crea un archivo <code>main.py</code>:</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/projects\")\ndef get_projects():\n    return {\"projects\": [{\"id\": 1, \"name\": \"Proyecto A\", \"status\": \"active\"}]}\n</code></pre> <p>Ejecuta la API:</p> <pre><code>uvicorn main:app --reload\n</code></pre> <p>Visita <code>http://127.0.0.1:8000/projects</code> para ver la respuesta JSON o <code>http://127.0.0.1:8000/docs</code> para la documentaci\u00f3n.</p> <p>\u00a1Primer logro!</p> <p>Has creado tu primera API con FastAPI. \u00a1El cielo es el l\u00edmite!</p>"},{"location":"content/p2/#practica-de-la-clase","title":"Pr\u00e1ctica de la Clase \ud83d\udda5\ufe0f","text":"<p>\ud83c\udfaf Tarea pr\u00e1ctica: Crea una API con un endpoint <code>/projects</code> que devuelva una lista de tres proyectos en JSON, cada uno con <code>id</code>, <code>name</code> y <code>status</code>.</p> <p>C\u00f3digo de ejemplo:</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/projects\")\ndef get_projects():\n    return {\n        \"projects\": [\n            {\"id\": 1, \"name\": \"Proyecto A\", \"status\": \"active\"},\n            {\"id\": 2, \"name\": \"Proyecto B\", \"status\": \"completed\"},\n            {\"id\": 3, \"name\": \"Proyecto C\", \"status\": \"pending\"}\n        ]\n    }\n</code></pre> <p>Instrucciones: 1. Guarda el c\u00f3digo en <code>main.py</code>. 2. Ejecuta con <code>uvicorn main:app --reload</code>. 3. Verifica en <code>http://127.0.0.1:8000/projects</code>. 4. Explora la documentaci\u00f3n en <code>http://127.0.0.1:8000/docs</code>.</p>"},{"location":"content/p2/#actividad-consumir-la-api-rest-desde-postman-thunder-client-y-una-pagina-web","title":"Actividad: Consumir la API REST desde Postman, Thunder Client y una P\u00e1gina Web \ud83c\udf10","text":"<p>Objetivo: Aprender a consumir una API REST (como el endpoint <code>/projects</code> de la Clase 1) utilizando Postman, Thunder Client (extensi\u00f3n de VS Code), y una p\u00e1gina web b\u00e1sica con HTML/JavaScript, documentando el proceso y los resultados.</p>"},{"location":"content/p2/#instrucciones","title":"Instrucciones \ud83d\udcdd","text":"<p>Investiga y prueba c\u00f3mo consumir la API REST creada en la Clase 1 (<code>http://127.0.0.1:8000/projects</code>) utilizando tres m\u00e9todos:</p> <ol> <li> <p>Postman:</p> </li> <li> <p>Thunder Client (extensi\u00f3n de VS Code):   </p> </li> <li> <p>P\u00e1gina web con HTML/JavaScript:  </p> </li> </ol>"},{"location":"content/p2/#entregables","title":"Entregables \ud83d\udce6","text":"<ul> <li>Archivo <code>actividad.md</code> con la documentaci\u00f3n y el p\u00e1rrafo de hallazgos.</li> <li>Capturas de pantalla de Postman y Thunder Client.</li> <li>Archivo <code>index.html</code> con el c\u00f3digo JavaScript.</li> <li>Repositorio GitHub con todos los archivos.</li> </ul>"},{"location":"content/p3/","title":"P3","text":""},{"location":"content/p3/#actividad","title":"Actividad","text":""},{"location":"content/p3/#paso-0-antes-de-empezar","title":"Paso 0 \u2013 Antes de empezar","text":"<p>\u00a1Haz un fork del repositorio! Dir\u00edgete a: <pre><code>https://github.com/jfinfosena/act_pap_s1.git\n</code></pre> y pulsa el bot\u00f3n Fork (esquina superior derecha). Tras ello cl\u00f3nalo en tu equipo:</p> <pre><code>git clone https://github.com/TU-USUARIO/act_pap_s1.git\ncd act_pap_s1\n</code></pre>"},{"location":"content/p3/#ejercicio-01-for","title":"Ejercicio 01 \u2013 for","text":"<p>Enunciado: Usando un ciclo for, imprime los n\u00fameros enteros del 0 al 9, cada uno en una l\u00ednea.</p>"},{"location":"content/p3/#ejercicio-02-while","title":"Ejercicio 02 \u2013 while","text":"<p>Enunciado: Mediante un ciclo while, imprime los n\u00fameros enteros del 10 al 1 en orden descendente, cada n\u00famero en una l\u00ednea.</p>"},{"location":"content/p3/#ejercicio-03-for","title":"Ejercicio 03 \u2013 for","text":"<p>Enunciado: Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado final.</p>"},{"location":"content/p3/#ejercicio-04-while","title":"Ejercicio 04 \u2013 while","text":"<p>Enunciado: Utilizando un ciclo while, solicita al usuario que ingrese n\u00fameros. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los n\u00fameros ingresados.</p>"},{"location":"content/p3/#ejercicio-05-for","title":"Ejercicio 05 \u2013 for","text":"<p>Enunciado: Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 \u00d7 1, 7 \u00d7 2, \u2026, 7 \u00d7 10, cada resultado en una l\u00ednea.</p>"},{"location":"content/p3/#ejercicio-06-while","title":"Ejercicio 06 \u2013 while","text":"<p>Enunciado: Mediante un ciclo while, genera y muestra los primeros 15 m\u00faltiplos de 3, comenzando desde 3.</p>"},{"location":"content/p3/#ejercicio-07-for","title":"Ejercicio 07 \u2013 for","text":"<p>Enunciado: Con un ciclo for, cuenta cu\u00e1ntas letras \u201ca\u201d (min\u00fascula) hay en la cadena <code>texto = \"manzana\"</code> y muestra el total.</p>"},{"location":"content/p3/#ejercicio-08-while","title":"Ejercicio 08 \u2013 while","text":"<p>Enunciado: Usando un ciclo while, calcula y muestra los cuadrados de los n\u00fameros del 1 al 20 (1\u00b2, 2\u00b2, \u2026, 20\u00b2), cada resultado en una l\u00ednea.</p>"},{"location":"content/p3/#ejercicio-09-for","title":"Ejercicio 09 \u2013 for","text":"<p>Enunciado: Con un ciclo for, imprime todos los n\u00fameros pares del 2 al 50 (ambos inclusive), cada n\u00famero en una l\u00ednea.</p>"},{"location":"content/p3/#ejercicio-10-while","title":"Ejercicio 10 \u2013 while","text":"<p>Enunciado: Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \u201cfin\u201d. Al final, muestra cu\u00e1ntas palabras se leyeron (sin contar \u201cfin\u201d).</p>"},{"location":"content/p3/#ejercicio-11-for","title":"Ejercicio 11 \u2013 for","text":"<p>Enunciado: Con un ciclo for, imprime cada car\u00e1cter de la palabra <code>\"python\"</code> en una l\u00ednea separada.</p>"},{"location":"content/p3/#ejercicio-12-while","title":"Ejercicio 12 \u2013 while","text":"<p>Enunciado: Utilizando un ciclo while, calcula el factorial de un n\u00famero entero <code>n</code> introducido por el usuario y muestra el resultado.</p>"},{"location":"content/p3/#ejercicio-13-for","title":"Ejercicio 13 \u2013 for","text":"<p>Enunciado: Con un ciclo for, imprime los n\u00fameros del 1 al 30 saltando de 3 en 3 (1, 4, 7, \u2026, 28), cada n\u00famero en una l\u00ednea.</p>"},{"location":"content/p3/#ejercicio-14-while","title":"Ejercicio 14 \u2013 while","text":"<p>Enunciado: Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un n\u00famero aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitaci\u00f3n al final.</p>"},{"location":"content/p3/#ejercicio-15-for","title":"Ejercicio 15 \u2013 for","text":"<p>Enunciado: Con un ciclo for, imprime un tri\u00e1ngulo rect\u00e1ngulo de 5 filas usando el car\u00e1cter <code>*</code>. Ejemplo de salida: <pre><code>*\n**\n***\n****\n*****\n</code></pre></p>"},{"location":"content/p3/#ejercicio-16-while","title":"Ejercicio 16 \u2013 while","text":"<p>Enunciado: Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde <code>00:00</code> hasta <code>00:59</code> en formato <code>MM:SS</code>, cada valor en una l\u00ednea.</p>"},{"location":"content/p3/#ejercicio-17-for","title":"Ejercicio 17 \u2013 for","text":"<p>Enunciado: Con un ciclo for, solicita al usuario que ingrese un n\u00famero entero positivo y calcula la suma de sus d\u00edgitos, mostrando el resultado final.</p>"},{"location":"content/p3/#ejercicio-18-while","title":"Ejercicio 18 \u2013 while","text":"<p>Enunciado: Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, \u2026 y termina cuando se alcance el primer valor mayor que 1000.</p>"},{"location":"content/p3/#ejercicio-19-for","title":"Ejercicio 19 \u2013 for","text":"<p>Enunciado: Con un ciclo for, cuenta cu\u00e1ntas vocales (sin distinci\u00f3n de may\u00fasculas/min\u00fasculas) hay en la frase <code>frase = \"programacion es divertida\"</code> y muestra el total.</p>"},{"location":"content/p3/#ejercicio-20-while","title":"Ejercicio 20 \u2013 while","text":"<p>Enunciado: Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca <code>-1</code>. Al final, muestra la edad mayor que se haya ingresado.</p>"},{"location":"pi/p1/","title":"Introducci\u00f3n Proyecto Integrador","text":""}]}